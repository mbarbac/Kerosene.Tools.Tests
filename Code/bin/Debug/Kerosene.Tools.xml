<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kerosene.Tools</name>
    </assembly>
    <members>
        <member name="T:Kerosene.Tools.EasyVersion">
            <summary>
            Represents a version specification composed by an arbitrary number of numeric,
            alphanumeric or hybrid parts.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.IEquivalent`1">
            <summary>
            Represents the ability of an object to verify if it can be considered as equivalent to
            a target instance of the given type, based upon any arbitrary criteria it implements.
            </summary>
            <typeparam name="T">The type of the target objects this one will be tested against.</typeparam>
        </member>
        <member name="M:Kerosene.Tools.IEquivalent`1.EquivalentTo(`0)">
            <summary>
            Returns true if this object can be considered as equivalent to the target one given.
            </summary>
            <param name="target">The target object this one will be tested for equivalence.</param>
            <returns>True if this object can be considered as equivalent to the target one given.</returns>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.#ctor(System.String)">
            <summary>
            Initializes a new instance using the given string as the initial specification.
            <para>If the specification is null or empty, or it is composed by empty parts only,
            the new instance is equivalent to the standard 'Empty' one.</para>
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.OnInitialize(System.String)">
            <summary>
            Used both for the constructor and for the Clone() method
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.Clone">
            <summary>
            Returns a new instance that is a copy of this one.
            </summary>
            <returns>A new instance that is a copy of this one.</returns>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.Equals(System.Object)">
            <summary>
            Determines whether this object can be considered as the same one as the given one.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.Compare(Kerosene.Tools.EasyVersion,Kerosene.Tools.EasyVersion)">
            <summary>
            Compares the two given instances returning -1 if the left one can be considered
            smaller than the right one, +1 if it can be consider as bigger, or 0 if both can
            be considered equivalent.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>An interger expressing the relative order of the left instance when
            compared against the right one.</returns>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.GetHashCode">
            <summary>
            Serves as the hash function for this type.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.op_GreaterThan(Kerosene.Tools.EasyVersion,Kerosene.Tools.EasyVersion)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.op_LessThan(Kerosene.Tools.EasyVersion,Kerosene.Tools.EasyVersion)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.op_GreaterThanOrEqual(Kerosene.Tools.EasyVersion,Kerosene.Tools.EasyVersion)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.op_LessThanOrEqual(Kerosene.Tools.EasyVersion,Kerosene.Tools.EasyVersion)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.op_Equality(Kerosene.Tools.EasyVersion,Kerosene.Tools.EasyVersion)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.op_Inequality(Kerosene.Tools.EasyVersion,Kerosene.Tools.EasyVersion)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.CompareTo(Kerosene.Tools.EasyVersion)">
            <summary>
            Compares this instance against the given one returning -1 if this instance can be
            considered smaller than the given one, +1 if it can be consider as bigger, or 0 if
            both can be considered equivalent.
            </summary>
            <param name="target">The other instance to compare this one against to.</param>
            <returns>An interger expressing the relative order of this instance when compared
            against the target one.</returns>
        </member>
        <member name="M:Kerosene.Tools.EasyVersion.EquivalentTo(Kerosene.Tools.EasyVersion)">
            <summary>
            Returns true if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise.
            </summary>
            <param name="target">The target object to test for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise</returns>
        </member>
        <member name="P:Kerosene.Tools.EasyVersion.Empty">
            <summary>
            The default empty instance.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.EasyVersion.Count">
            <summary>
            The number of portions contained in this part specification.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.EasyVersion.Payload">
            <summary>
            The payload this instance is carrying, or null if there is no contents.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.VersionPart">
            <summary>
            Represents a part whithin a version specification.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.VersionPart.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.VersionPart.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.VersionPart.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.VersionPart.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.VersionPart.Compare(Kerosene.Tools.VersionPart,Kerosene.Tools.VersionPart)">
            <summary>
            Compares the two given instances returning -1 if the left one can be considered
            smaller than the right one, +1 if it can be consider as bigger, or 0 if both can
            be considered equivalent.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>An interger expressing the relative order of the left instance when
            compared against the right one.</returns>
        </member>
        <member name="M:Kerosene.Tools.VersionPart.CompareTo(Kerosene.Tools.VersionPart)">
            <summary>
            Compares this instance against the given one returning -1 if this instance can be
            considered smaller than the given one, +1 if it can be consider as bigger, or 0 if
            both can be considered equivalent.
            </summary>
            <param name="target">The other instance to compare this one against to.</param>
            <returns>An interger expressing the relative order of this instance when compared
            against the target one.</returns>
        </member>
        <member name="M:Kerosene.Tools.VersionPart.EquivalentTo(Kerosene.Tools.VersionPart)">
            <summary>
            Returns true if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise.
            </summary>
            <param name="target">The target object to test for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise</returns>
        </member>
        <member name="P:Kerosene.Tools.VersionPart.Count">
            <summary>
            The number of portions contained in this part specification.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.VersionPart.Payload">
            <summary>
            The payload this instance is carrying, or null if there is no contents.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.PartItem">
            <summary>
            Represents a sub-item whithin a bersion part.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.PartItem.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.PartItem.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.PartItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.PartItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.PartItem.Compare(Kerosene.Tools.PartItem,Kerosene.Tools.PartItem)">
            <summary>
            Compares the two given instances returning -1 if the left one can be considered
            smaller than the right one, +1 if it can be consider as bigger, or 0 if both can
            be considered equivalent.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>An interger expressing the relative order of the left instance when
            compared against the right one.</returns>
        </member>
        <member name="M:Kerosene.Tools.PartItem.CompareTo(Kerosene.Tools.PartItem)">
            <summary>
            Compares this instance against the given one returning -1 if this instance can be
            considered smaller than the given one, +1 if it can be consider as bigger, or 0 if
            both can be considered equivalent.
            </summary>
            <param name="target">The other instance to compare this one against to.</param>
            <returns>An interger expressing the relative order of this instance when compared
            against the target one.</returns>
        </member>
        <member name="M:Kerosene.Tools.PartItem.EquivalentTo(Kerosene.Tools.PartItem)">
            <summary>
            Returns true if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise.
            </summary>
            <param name="target">The target object to test for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise</returns>
        </member>
        <member name="P:Kerosene.Tools.PartItem.Payload">
            <summary>
            The payload this instance is carrying, or null if there is no contents.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.PartItem.IsNumeric">
            <summary>
            Whether the payload shall be interpreted as a numeric one or not.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.PartItem.Value">
            <summary>
            The value of the payload as an uint.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DeepObject">
            <summary>
            Represents a multi-level dynamic object whose members can also be dynamic ones, to any
            arbitrary depth.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.IDisposableEx">
            <summary>
            Extends the 'IDisposable' interface.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.IDisposableEx.IsDisposed">
            <summary>
            Whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.DeepObject.DEFAULT_CASE_SENSITIVE_NAMES">
            <summary>
            Whether, by default, the names of the dynamic properties of DeepObject instances are
            considered as case sensitive or not.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.NameFromIndexes(System.Object[])">
            <summary>
            Generates a normalized member name based upon the given indexes.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="caseSensitiveNames">Whether the names of the members of this instance
            are case sensitive (the default) or not (to permit non-convencional scenarios). </param>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.OnDispose(System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.EquivalentTo(Kerosene.Tools.DeepObject)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepName">
            <summary>
            Gets the own name of this instance, or null.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepFullName">
            <summary>
            Gets the full name of this instance, consisting in its own name prepended by the
            full name of its host instance, if any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepIndexed">
            <summary>
            Gets whether this instance represents an indexed member or not.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepHasValue">
            <summary>
            Gets whether this instance carries a value or not.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepValue">
            <summary>
            Gets the value this instance is carrying.
            <para>Note that the value returned by this method is meaningless if this instance
            has been disposed, or if it does not carry a value.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepValue(System.Object)">
            <summary>
            Sets the value this instance will carry.
            </summary>
            <param name="value">The value this instance will carry.</param>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepValueReset">
            <summary>
            Resets any value this instance might be carrying.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepParent">
            <summary>
            Gets the host parent instance of this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepLevel">
            <summary>
            Gets the level of this instance, defined as 0 if it is a root instance, as 1 if it
            is a first-level member, and so on.
            </summary>
            <returns>The level of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepCaseSensitiveNames">
            <summary>
            Gets whether the names of the members of this instance are case sensitive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepCount">
            <summary>
            Gets the number of first-level members in this instance, or cero if there are no
            members or if this instance has been disposed.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepMembers">
            <summary>
            Gets the collection of members in this instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepFind(System.Object[])">
            <summary>
            Returns the member whose name or indexes are given, or null if not such member can
            be found.
            </summary>
            <param name="args">Either the name of the member or the values of the indexed of
            the member.</param>
            <returns>The requested member, or null.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepAdd(System.Object[])">
            <summary>
            Adds into this instance and returns the new member created for either the given name
            or the given set of indexes.
            </summary>
            <param name="args">Either the name of the member or the values of the indexed of
            the member.</param>
            <returns>The new member added.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepRemove(Kerosene.Tools.DeepObject)">
            <summary>
            Removes the given member from this instance. Returns true if it has been removed
            succesfully, or false otherwise.
            </summary>
            <param name="member">The member to remove.	</param>
            <returns></returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.DeepClear(System.Boolean)">
            <summary>
            Clears this instance by removing all its members and optionally disposing them.
            </summary>
            <param name="disposeMembers">True to dispose the members removed.</param>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.GetDynamicMemberNames">
            <summary>
            Gets the names of the members registered into this instance.
            </summary>
            <returns>A collection with the names of the members of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets the value of the requested member, or the member itself if it does not carry a
            value. If the member does not exist yet a new one is created.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Sets the given value on the requested member. If the member does not exist yet a new one
            is created.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Gets the value of the requested indexed member, or the member itself if it does not
            carry a value. If the member does not exist yet a new one is created.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Sets the given on the requested indexed member. If the member does not exist yet a new
            one is created.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DeepObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Tries to convert the value this member carries into the given type, or the member itself
            if it does not carry a value.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DeepObject.IsDisposed">
            <summary>
            Whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DeepObject.Item(System.Object[])">
            <summary>
            Gets or set the value of the member whose name or indexes are given.
            <para>The getter throws an exception if no member with that name exist.</para>
            <para>The setter creates a new member with the given name if needed.</para>
            </summary>
            <param name="args">Either the name of the member or the values of the indexed of
            the member.</param>
            <returns>The value of the member whose name or indexes given</returns>
        </member>
        <member name="T:Kerosene.Tools.ElementInfo">
            <summary>
            Provides an symetric way for treating both the fields and properties of a given type,
            collectively known as 'members' for the operations of this class and related ones.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.ValidateMemberType(System.Reflection.MemberInfo)">
            <summary>
            Validates that the given member info is a field or a non-indexed property, throwing
            an exception otherwise.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="info">The member's info instance this one refers to.</param>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.#ctor(Kerosene.Tools.ElementInfo,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new multipart instance.
            </summary>
            <remarks>This is an internal constructor and no checks are made about if the element
            belongs to the parent instance or not.</remarks>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
            <param name="disposeParent">True to also dispose the parent instance, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeParent">True to also dispose the parent instance, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.GetValue(System.Object)">
            <summary>
            Gets the value of this element refering to the given host.
            </summary>
            <param name="host">The host instance this element depend from. If this one refers to
            a multipart element, the host instance is interpreted as the root-most host in the
            declaring chain.</param>
            <returns>The value this instance contains.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this element refering to the given host.
            </summary>
            <param name="host">The host instance this element depend from. If this one refers to
            a multipart element, the host instance is interpreted as the root-most host in the
            declaring chain.</param>
            <param name="value">The value to set into this element.</param>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.GetElements(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets a list containing the elements (properties and fields) found on the given type.
            If the flags contains the 'FlattenHierarchy' one then the interfaces it may implement
            are also taken into consideration.
            <para>Note that this method does not include recursively the elements found in the first
            level elements of the given type.</para>
            </summary>
            <param name="type">The type to obtain its elements from.</param>
            <param name="flags">The flags to use to find the elements.</param>
            <returns>A list with the elements found.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.ParseName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the name of the element the given expression resolves to. Multipart names
            are allowed.
            </summary>
            <typeparam name="T">The type where to find the element.</typeparam>
            <param name="element">The expression that resolves into the element.</param>
            <returns>A string containing the name of the requested element.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.Create(System.Type,System.String,System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Creates a new ElementInfo instance that refers to the element whose name is given.
            </summary>
            <param name="type">The type where the element is declared or, if this is a multipart
            one, the root-most one in the declaring chain.</param>
            <param name="name">The potentially multipart name of the element.</param>
            <param name="raise">If true an exception is thrown if the element, or any of its parts,
            is not found. If false null is returned.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>A new ElementInfo instance, or null.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.Create``1(System.String,System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Creates a new ElementInfo instance that refers to the element whose name is given.
            </summary>
            <typeparam name="T">The type where the element is declared. If it is a multipart one,
            this type must be the root-most one in the declaring chain.</typeparam>
            <param name="name">The potentially multipart name of the element.</param>
            <param name="raise">If true an exception is thrown if the element, or any of its parts,
            is not found. If false null is returned.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>A new ElementInfo instance, or null.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Creates a new ElementInfo instance that refers to the element whose name is obtained
            from parsing the expression given.
            </summary>
            <typeparam name="T">The type where the element is declared. If it is a multipart one,
            this type must be the root-most one in the declaring chain.</typeparam>
            <param name="element">The expression that resolves into the element.</param>
            <param name="raise">If true an exception is thrown if the element, or any of its parts,
            is not found. If false null is returned.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>A new ElementInfo instance, or null.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.GetElementValue``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the given element.
            </summary>
            <typeparam name="T">The type where the element is declared. If it is a multipart one,
            this type must be the root-most one in the declaring chain.</typeparam>
            <param name="host">The host where the element is declared. If it is a multipart one,
            the host shall be the root-most one.</param>
            <param name="name">The potentially multipart name of the element.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.GetElementValue``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the given element.
            </summary>
            <typeparam name="T">The type where the element is declared. If it is a multipart one,
            this type must be the root-most one in the declaring chain.</typeparam>
            <param name="host">The host where the element is declared. If it is a multipart one,
            the host shall be the root-most one.</param>
            <param name="element">The expression that resolves into the element.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.SetElementValue``1(``0,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the given element.
            </summary>
            <typeparam name="T">The type where the element is declared. If it is a multipart one,
            this type must be the root-most one in the declaring chain.</typeparam>
            <param name="host">The host where the element is declared. If it is a multipart one,
            the host shall be the root-most one.</param>
            <param name="name">The potentially multipart name of the element.</param>
            <param name="value">The value to set into the element.</param>
            <param name="flags">The binding flags to use to find the element.</param>
        </member>
        <member name="M:Kerosene.Tools.ElementInfo.SetElementValue``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the given element.
            </summary>
            <typeparam name="T">The type where the element is declared. If it is a multipart one,
            this type must be the root-most one in the declaring chain.</typeparam>
            <param name="host">The host where the element is declared. If it is a multipart one,
            the host shall be the root-most one.</param>
            <param name="element">The expression that resolves into the element.</param>
            <param name="value">The value to set into the element.</param>
            <param name="flags">The binding flags to use to find the element.</param>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.IsDisposed">
            <summary>
            Whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.Name">
            <summary>
            The name of the element this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.FullName">
            <summary>
            The full name of the element this instance refers to, prepending its proper name with
            its parent full name, if any.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.IsMultipart">
            <summary>
            Whether this instance refers to a multipart specification or not.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.Parent">
            <summary>
            The parent of this instance, or null if it is a not-multipart one.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.MemberInfo">
            <summary>
            The underlying MemberInfo instance this object refers to, or null if this instance is
            disposed.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.PropertyInfo">
            <summary>
            The PropertyInfo this instance refers to, or null if this instance is disposed, or if
            it does not refer to a property.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.FieldInfo">
            <summary>
            The FieldInfo this instance refers to, or null if this instance is disposed, or if
            it does not refer to a field.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.ElementType">
            <summary>
            The type of the element this instance refers to, or null if it is disposed.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.DeclaringType">
            <summary>
            The type this element is declared from, or null if this instance is disposed.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.IsProperty">
            <summary>
            Whether this instance refers to a property.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.IsField">
            <summary>
            Whether this instance refers to a field.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.CanRead">
            <summary>
            Whether the contents of this element can be read.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ElementInfo.CanWrite">
            <summary>
            Whether the contents of this element can be written.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicParser">
            <summary>
            Represents the ability of parsing an arbitrary dynamic lambda expression (DLE - defined
            as a lambda expression where at least one of its arguments is a dynamic one) returning
            an instance of this class that holds both the result of that parsing and the arguments
            used.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicParser.Parse(System.Delegate,System.Object[])">
            <summary>
            Parsers the given dynamic (or regular) lambda expression and returns an instance that
            holds the result of the parsing along with the arguments used in it.
            <para>
            - The result of the parsing is held in the 'Result' property, and it can a regular
              object, including null references, or a 'DynamicNode' instance if the expression
              resolves into the definition of an arbitrary logic bounded to the dynamic arguments
              used in it.
            </para><para>
            - Any not dynamic value or reference found in the expression, along with the result
              of any standard method invoked in it, is captured at the moment when the expression
              is parsed.
            </para>
            </summary>
            <param name="lambda">The lambda expression to parse.</param>
            <param name="concretes">An optional array containing the non-dynamic arguments to
            use with the expression.</param>
            <returns>A new DynamicParser instance that holds the result of the parsed expression
            and the arguments used in it.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicParser.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicParser.OnDispose(System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicParser.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicParser.IsDisposed">
            <summary>
            Whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicParser.Arguments">
            <summary>
            The collection of arguments used when declaring the dynamic lambda expression, if any
            was used,l or null if this instance is disposed.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicParser.DynamicArguments">
            <summary>
            The collection of dynamic arguments used when declaring the dynamic lambda expression,
            if any were used, or null if this instance is disposed.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicParser.LastNode">
            <summary>
            The last node binded by the parsing engine, or null.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicParser.Result">
            <summary>
            The result of the parsing of the dynamic lambda expression used to construct this
            instance.
            <para>- This result can be a regular value, a null value, an object reference, or a
            dynamic node instance containing the last binded node from which the tree of logical
            operations binded can be obtained.</para>
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode">
            <summary>
            Represents an abstract node in the tree of logic operations discovered when parsing a
            dynamic lambda expression.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the object responsible for binding the dynamic operations on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.#ctor">
            <summary>
            Initializes a new empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
            <param name="disposeParent">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.EquivalentTo(Kerosene.Tools.DynamicNode)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.IsNodeAncestor(Kerosene.Tools.DynamicNode)">
            <summary>
            Returns whether the given node is an ancestor of this instance.
            </summary>
            <param name="node">The node to test.</param>
            <returns>True if the given node is an ancestor of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.ChangeHost(Kerosene.Tools.DynamicNode)">
            <summary>
            Changes the host of this instance to the new reference given.
            <para>
            This method is provided to facilitate the manipulation of node trees, at the caller's
            risk: there is no checks on whether the new reference is null, or if setting it to the
            new value would create cycles in the tree, or on any other condition.
            </para>
            </summary>
            <param name="newHost">The new host of this instance.</param>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.IsDisposed">
            <summary>
            Whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Host">
            <summary>
            The host this instance depends on, or null if no host is available.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Parser">
            <summary>
            The actual parser associated with this instance, if any.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.Argument">
            <summary>
            Represents an argument in a dynamic lambda expression, as in 'x => ...'.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="name">The name of the dynamic argument this instance represents.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.EquivalentTo(Kerosene.Tools.DynamicNode.Argument)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Argument.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Argument.Name">
            <summary>
            The name of the argument this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.GetMember">
            <summary>
            Represents a dynamic get member expression, as in 'x => x.Member'.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.#ctor(Kerosene.Tools.DynamicNode,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="host">The host where this member is binded.</param>
            <param name="name">The name of the dynamic member this instance represents.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.EquivalentTo(Kerosene.Tools.DynamicNode.GetMember)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetMember.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.GetMember.Name">
            <summary>
            The name of the member this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.SetMember">
            <summary>
            Represents a dynamic set member expression, as in 'x => x.Member = Value'.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.#ctor(Kerosene.Tools.DynamicNode,System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="host">The host where this member is binded.</param>
            <param name="name">The name of the dynamic member this instance represents.</param>
            <param name="value">The value to set into this member.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.EquivalentTo(Kerosene.Tools.DynamicNode.SetMember)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetMember.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.SetMember.Name">
            <summary>
            The name of the member this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.SetMember.Value">
            <summary>
            The value to set into the dynamic member this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.GetIndexed">
            <summary>
            Represents a dynamic get indexed member operation, as in 'x => x.Member[...]'.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.#ctor(Kerosene.Tools.DynamicNode,System.Object[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="host">The host where this member is binded.</param>
            <param name="indexes">The indexes to use to access this member.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.EquivalentTo(Kerosene.Tools.DynamicNode.GetIndexed)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.GetIndexed.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.GetIndexed.Indexes">
            <summary>
            The indexes used to access the dynamic member this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.SetIndexed">
            <summary>
            Represents a dynamic set indexed member operation, as in 'x => x.Member[...] = Value'.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.#ctor(Kerosene.Tools.DynamicNode,System.Object[],System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="host">The host where this member is binded.</param>
            <param name="indexes">The indexes to use to access this member.</param>
            <param name="value">The value to set into this member.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.EquivalentTo(Kerosene.Tools.DynamicNode.SetIndexed)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.SetIndexed.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.SetIndexed.Indexes">
            <summary>
            The indexes used to access the dynamic member this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.SetIndexed.Value">
            <summary>
            The value to set into the dynamic member this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.Method">
            <summary>
            Represents a dynamic method invocation operation, as in 'x => x.Method(...)'.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.#ctor(Kerosene.Tools.DynamicNode,System.String,System.Object[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="host">The host where this method is binded.</param>
            <param name="name">The name of the dynamic method this instance represents.</param>
            <param name="arguments">An array containing the arguments to use to invoke this
            method, or null if no arguments are used. An empty array is not captured and the
            property that holds the list of arguments becomes null.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.EquivalentTo(Kerosene.Tools.DynamicNode.Method)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Method.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Method.Name">
            <summary>
            The name of the method this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Method.Arguments">
            <summary>
            The arguments used to the method invocation this instance refers to, or null if
            no arguments were used or if the array of arguments was empty.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.Invoke">
            <summary>
            Represents a dynamic direct invocation operation, as in 'x => x(...)'.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.#ctor(Kerosene.Tools.DynamicNode,System.Object[])">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="host">The host that is invoked.</param>
            <param name="arguments">An array containing the arguments to use to invoke this
            host, or null if no arguments are used. An empty array is not captured and the
            property that holds the list of arguments becomes null.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.EquivalentTo(Kerosene.Tools.DynamicNode.Invoke)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Invoke.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Invoke.Arguments">
            <summary>
            The arguments used to invoke this instance, or null if no arguments were used or
            if the array of arguments was empty.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.Binary">
            <summary>
            Represents a dynamic binary operation, as in 'x => Left op Right'.
            <para>The left argument must be a dynamic node.</para>
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.#ctor(Kerosene.Tools.DynamicNode,System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="left">The left node of the operation.</param>
            <param name="op">The operation that binds both arguments.</param>
            <param name="right">The right node of the operation.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.EquivalentTo(Kerosene.Tools.DynamicNode.Binary)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Binary.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Binary.Left">
            <summary>
            The left operand of the operation this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Binary.Operation">
            <summary>
            The binary operation this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Binary.Right">
            <summary>
            The right operand of the operation this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.Unary">
            <summary>
            Represents a dynamic unary operation, as in 'x => op Target'.
            <para>The target operator must be a dynamic one.</para>
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.#ctor(System.Linq.Expressions.ExpressionType,Kerosene.Tools.DynamicNode)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="op">The operation that binds the target argument.</param>
            <param name="target">The target node of the operation.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.EquivalentTo(Kerosene.Tools.DynamicNode.Unary)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Unary.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Unary.Operation">
            <summary>
            The unary operation this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Unary.Target">
            <summary>
            The target node of the operation this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicNode.Convert">
            <summary>
            Represents a dynamic conversion or cast operation, as in 'x => (type)x'.
            <para>The target object must be a dynamic node.</para>
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.#ctor(System.Type,Kerosene.Tools.DynamicNode)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="newType">The new type to convert the target to.</param>
            <param name="target">The target node of the operation.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.OnDispose(System.Boolean,System.Boolean)">
            <summary>
            Invoked when disposing or finalizing this instance.
            </summary>
            <param name="disposing">True if the object is being disposed, false otherwise.</param>
            <param name="disposeHost">True to also dispose the parent instance this one is
            hosted by, if any.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the standard representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.Clone">
            <summary>
            Returns a new instance that is a copy of the original one.
            </summary>
            <returns>A new instance that is a copy of the original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.EquivalentTo(Kerosene.Tools.DynamicNode.Convert)">
            <summary>
            Returns true if the state of this object can be considered as equivalent to the target
            one, based upon any arbitrary criteria implemented in this method.
            </summary>
            <param name="target">The target instance this one will be tested for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target one, or false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicNode.Convert.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Convert.NewType">
            <summary>
            The new type to convert the target of this operation to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DynamicNode.Convert.Target">
            <summary>
            The target node of the operation this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicMetaNode">
            <summary>
            Helper class to bind the dynamic operations with its dynamic arguments or derived
            instances.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.MetaList2List(System.Dynamic.DynamicMetaObject[])">
            <summary>
            Returns the array of underlying objects from a meta objects' array.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Binds a dynamic get member operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Binds a dynamic set member operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Binds a dynamic get indexed member operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <summary>
            Binds a dynamic set indexed member operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Binds a dynamic method invocation operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Binds a dynamic instance invocation operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Binds a dynamic binary operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
            <summary>
            Binds a dynamic unary operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicMetaNode.BindConvert(System.Dynamic.ConvertBinder)">
            <summary>
            Binds a dynamic convert or cast operation.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DynamicInfo">
            <summary>
            Represent an unified way to treat both properties and fields of a given instance when
            its structure and members are non known at compile time, or when they have to be
            discovered at run-time.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DynamicInfo.ParseName(System.Func{System.Object,System.Object})">
            <summary>
            Returns the name of the element the dynamic lambda expression resolves into.
            </summary>
            <param name="element">The dynamic lambda expression that resolves into the name of
            the element.</param>
            <returns>The name of the requested element.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicInfo.Read(System.Object,System.Func{System.Object,System.Object},System.Reflection.BindingFlags)">
            <summary>
            Reads from the given host the value of the element whose name is obtained parsing the
            dynamic lambda expression given.
            </summary>
            <param name="host">The instance that ultimately hosts the member to read.</param>
            <param name="element">A dynamic lambda expression that resolves into the name of the
            element.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>The value read from the requested element.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicInfo.Write(System.Object,System.Func{System.Object,System.Object},System.Object,System.Reflection.BindingFlags)">
            <summary>
            Writes into the given host the value of the element whose name is obtained parsing the
            dynamic lambda expression given.
            </summary>
            <param name="host">The instance that ultimately hosts the member to write into.</param>
            <param name="element">A dynamic lambda expression that resolves into the name of the
            element.</param>
            <param name="value">The value to write into the element.</param>
            <param name="flags">The binding flags to use to find the element.</param>
        </member>
        <member name="M:Kerosene.Tools.DynamicInfo.TryParseName(System.Func{System.Object,System.Object},System.String@)">
            <summary>
            Tries to parse the element name the dynamic lambda expression resolves into, setting
            output string name argument and returning null in case of success, or returning an
            exception if any error has happened.
            </summary>
            <param name="element">The dynamic lambda expression that resolves into the name of
            element.</param>
            <param name="name">The output string parameter to hold the result of the parsing.</param>
            <returns>Null in case of success, or an exception describing the error.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicInfo.TryRead(System.Object,System.Func{System.Object,System.Object},System.Object@,System.Reflection.BindingFlags)">
            <summary>
            Tries to read the value of the element whose name is obtained by parsing the dynamic
            lambda expression given. Sets the output value argument and returns null in case of
            success, or returns an exception if any error has happened.
            </summary>
            <param name="host">The instance that ultimately hosts the element.</param>
            <param name="element">A dynamic lambda expression that resolves into the name of the
            element.</param>
            <param name="value">The output value argument to hold the result of the reading.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>Null in case of success, or an exception describing the error.</returns>
        </member>
        <member name="M:Kerosene.Tools.DynamicInfo.TryWrite(System.Object,System.Func{System.Object,System.Object},System.Object,System.Reflection.BindingFlags)">
            <summary>
            Tries to write into the element whose name is obtained by parsing the dynamic lambda
            lambda expression given the given value. Returns null in case of success, or returns
            an exception if any error has happened.
            </summary>
            <param name="host">The instance that ultimately hosts the element.</param>
            <param name="element">A dynamic lambda expression that resolves into the name of the
            element.</param>
            <param name="value">The value to write into the element.</param>
            <param name="flags">The binding flags to use to find the element.</param>
            <returns>Null in case of success, or an exception describing the error.</returns>
        </member>
        <member name="T:Kerosene.Tools.EquivalentEx">
            <summary>
            Helpers and extensions for working with 'IEquivalent' objects.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EquivalentEx.IsEquivalentTo(System.Object,System.Object)">
            <summary>
            Returns whether this source object can be considered as equivalent to the target one
            given, using a set of common criteria.
            </summary>
            <param name="source">This source object.</param>
            <param name="target">The target object the source one will be tested for equivalence.</param>
            <returns>True if this source object can be considered as equivalent to the target one.</returns>
        </member>
        <member name="M:Kerosene.Tools.EquivalentEx.WithIEquivalent(System.Object,System.Object)">
            <summary>
            Equivalence through the IEquivalent interface.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EquivalentEx.WithIDictionary(System.Object,System.Object)">
            <summary>
            Equivalence through the IDictionary interface.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EquivalentEx.WithIEnumerable(System.Object,System.Object)">
            <summary>
            Equivalence through the IEnumerable interface.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DebugEx">
            <summary>
            Extends the functionality of the 'System.Diagnostics.Debug' class.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DebugEx.AddConsoleListener">
            <summary>
            Adds to the list of registered listeners the standard console one, if it has not been
            added yet.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DebugEx.Indent">
            <summary>
            Increases the indent level by one.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DebugEx.Unindent">
            <summary>
            Decreases the indent level by one.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DebugEx.Write(System.String,System.Object[])">
            <summary>
            Writes the given message into the listeners without adding a newline terminator.
            <para>Intercepts appropriately any embedded newline characters.</para>
            </summary>
            <param name="message">The message to write.</param>
            <param name="args">The arguments to include into the formatted output.</param>
        </member>
        <member name="M:Kerosene.Tools.DebugEx.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the given message into the listeners adding a newline terminator.
            <para>Intercepts appropriately any embedded newline characters.</para>
            </summary>
            <param name="message">The message to write.</param>
            <param name="args">The arguments to include into the formatted output.</param>
        </member>
        <member name="M:Kerosene.Tools.DebugEx.IndentWrite(System.String,System.Object[])">
            <summary>
            Increases the indent level and then writes the given message into the listeners
            without adding a newline terminator.
            <para>Intercepts appropriately any embedded newline characters.</para>
            </summary>
            <param name="message">The message to write.</param>
            <param name="args">The arguments to include into the formatted output.</param>
        </member>
        <member name="M:Kerosene.Tools.DebugEx.IndentWriteLine(System.String,System.Object[])">
            <summary>
            Increases the indent level and then writes the given message into the listeners
            adding a newline terminator.
            <para>Intercepts appropriately any embedded newline characters.</para>
            </summary>
            <param name="message">The message to write.</param>
            <param name="args">The arguments to include into the formatted output.</param>
        </member>
        <member name="P:Kerosene.Tools.DebugEx.AutoFlush">
            <summary>
            Whether the writer buffer shall be flushed after each write or not.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DebugEx.IndentSize">
            <summary>
            The number of spaces in an indent.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DebugEx.IndentLevel">
            <summary>
            The current indent level.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DebugEx.Listeners">
            <summary>
            The collection of listeners monitoring the debug output.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.DebugEx.IsConsoleListenerRegistered">
            <summary>
            Whether the standard console listener has been already registered or not.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.ConsoleEx">
            <summary>
            Extends the functionality of the 'System.Console' class.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ConsoleEx.Write(System.String,System.Object[])">
            <summary>
            Writes the given message into the debug listeners and, if needed, into the console,
            without adding a newline terminator.
            </summary>
            <param name="message">The message to write.</param>
            <param name="args">The arguments to include into the formatted output.</param>
        </member>
        <member name="M:Kerosene.Tools.ConsoleEx.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the given message into the debug listeners and, if needed, into the console,
            adding a newline terminator.
            </summary>
            <param name="message">The message to write.</param>
            <param name="args">The arguments to include into the formatted output.</param>
        </member>
        <member name="M:Kerosene.Tools.ConsoleEx.ReadLine(System.String,System.Object[])">
            <summary>
            Retrieves the next line of characters from the standard input stream, preceeded by
            the given message and arguments to format it.
            <para>If the current execution is not in an interactive mode then an empty string
            is returned instead.</para>
            </summary>
            <param name="header">If not null the message to show to the user.</param>
            <param name="args">The optional collection of arguments to use in the header message</param>
            <returns>A string containing the characters read.</returns>
        </member>
        <member name="M:Kerosene.Tools.ConsoleEx.AskInteractive(System.String)">
            <summary>
            Ask the console user whether to execute the program in interactive mode or not, and
            sets the <see cref="P:Kerosene.Tools.ConsoleEx.Interactive"/> flag correspondingly.
            </summary>
            <param name="header">The question presented to the user. If null a default one is
            used.</param>
        </member>
        <member name="P:Kerosene.Tools.ConsoleEx.Interactive">
            <summary>
            Whether the current execution can be considered as an interactive one or not.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.DuplicateException">
            <summary>
            Represents an attempt of using an object that can be considered as a duplicate when such
            is not allowed.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DuplicateException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.DuplicateException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.DuplicateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.CannotExecuteException">
            <summary>
            Represents a failed attempt of executing an operation.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CannotExecuteException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CannotExecuteException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.CannotExecuteException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.CannotCreateException">
            <summary>
            Represents a failed attempt of creating an arbitrary object.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CannotCreateException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CannotCreateException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.CannotCreateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.NotEmptyException">
            <summary>
            Represents an attempt of using an object that cannot be considered as empty when such is
            needed.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.NotEmptyException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.NotEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.NotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.EmptyException">
            <summary>
            Represents an attempt of using an object that can be considered as empty when such is not
            allowed.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EmptyException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.EmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.EmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.OrphanException">
            <summary>
            Represents an attempt of using an object that can be considered as orphan when such is not
            allowed.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.OrphanException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.OrphanException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.OrphanException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.NotOrphanException">
            <summary>
            Represents an attempt of using an object that cannot be considered as orphan when such is
            needed.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.NotOrphanException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.NotOrphanException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.NotOrphanException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.NotFoundException">
            <summary>
            Represents a failed attempt of finding an object.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.NotFoundException.#ctor">
            <summary>
            Default constructor for an empty instance.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.NotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance with the given message.
            </summary>
            <param name="message">An string containing a description of the error.</param>
        </member>
        <member name="M:Kerosene.Tools.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with the given message and a reference to the exception that
            can be considered the cause of this one.
            </summary>
            <param name="message">An string containing a description of the error.</param>
            <param name="inner">A reference to the exception that can be considered as the cause
            of this one, or null if this information is not available or needed.</param>
        </member>
        <member name="T:Kerosene.Tools.SerializationEx">
            <summary>
            Helpers and extensions for working with serialization scenarios.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.Serialize(System.IO.Stream,System.Object,System.Runtime.Serialization.IFormatter)">
            <summary>
            Serializes the given object into this stream.
            </summary>
            <param name="sm">The stream.</param>
            <param name="obj">The object to serialize.</param>
            <param name="formatter">The formatter to use.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.Deserialize(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary>
            Returns the object deserialized from this stream.
            </summary>
            <param name="sm">The stream.</param>
            <param name="formatter">The formatter to use.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.Serialize(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
            Serializes the given object into this stream, using a binary or text formatter.
            </summary>
            <param name="sm">The stream.</param>
            <param name="obj">The object to serialize.</param>
            <param name="binary">True to use a binary formatter, False to use a Soap one.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.Deserialize(System.IO.Stream,System.Boolean)">
            <summary>
            Returns the object deserialized from this stream, using a binary or text formatter.
            </summary>
            <param name="sm">The stream.</param>
            <param name="binary">True to use a binary formatter, False to use a Soap one.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.PathSerialize(System.String,System.Object,System.Boolean)">
            <summary>
            Serializes the given object into the file specified, using a binary or text formatter.
            </summary>
            <param name="path">The path of the file the object will be persisted into.</param>
            <param name="obj">The object to serialize.</param>
            <param name="binary">True to use a binary formatter, False to use a Soap one.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.PathDeserialize(System.String,System.Boolean)">
            <summary>
            Returns the object deserialized from the file specified, using a binary or text formatter.
            </summary>
            <param name="path">The path of the file the object is to be deserialized from.</param>
            <param name="binary">True to use a binary formatter, False to use a Soap one.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.AddExtended(System.Runtime.Serialization.SerializationInfo,System.String,System.Object)">
            <summary>
            Adds into the serialization info the given entry, including its name, type and value.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="name">The name to identify this entry.</param>
            <param name="value">The value of this entry.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.GetExtended(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Gets from the serialization info the given entry added using the extended method.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="name">The name of the entry.</param>
            <returns>The de-serialized value.</returns>
        </member>
        <member name="M:Kerosene.Tools.SerializationEx.GetExtended``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Gets from the serialization info the given entry added using the extended method.
            </summary>
            <typeparam name="T">The type the de-serialized object will be casted to.</typeparam>
            <param name="info">The serialization info.</param>
            <param name="name">The name of the entry.</param>
            <returns>The de-serialized value.</returns>
        </member>
        <member name="T:Kerosene.Tools.SerializationHolder">
            <summary>
            Used for easy serialization of complex types.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.SerializationHolder.#ctor(System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="value">The object this instance refers to, or null.</param>
        </member>
        <member name="M:Kerosene.Tools.SerializationHolder.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the string representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.SerializationHolder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.SerializationHolder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.SerializationHolder.HolderValue">
            <summary>
            The object this instance refers to, or null.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.SerializationHolder.HolderType">
            <summary>
            The type of the object this instance refers to, or null.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.ExceptionEx">
            <summary>
            Helpers and extensions for working with 'Exception' instances.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ExceptionEx.ToDisplayString(System.Exception)">
            <summary>
            Returns a string representation of the exception suitable to presentation purposes.
            </summary>
            <param name="e">The exception.</param>
            <returns>An alternate string representation suitable to presentation purposes.</returns>
        </member>
        <member name="M:Kerosene.Tools.ExceptionEx.ToShortString(System.Exception)">
            <summary>
            Returns a string representation of the exception suitable to presentation purposes.
            </summary>
            <param name="e">The exception.</param>
            <returns>An alternate string representation suitable to presentation purposes.</returns>
        </member>
        <member name="M:Kerosene.Tools.ExceptionEx.ToLongString(System.Exception)">
            <summary>
            Returns a string representation of the exception suitable to presentation purposes.
            </summary>
            <param name="e">The exception.</param>
            <returns>An alternate string representation suitable to presentation purposes.</returns>
        </member>
        <member name="T:Kerosene.Tools.CharEx">
            <summary>
            Helpers and extensions for working with 'Char' instances.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CharEx.CompareTo(System.Char,System.Char,System.StringComparison)">
            <summary>
            Compares the source and target chars using the given rules. Returns -1 if the source is
            smaller than the target, +1 if the source is bigger than the target, or 0 if both can be
            considered the same.
            </summary>
            <param name="source">The source instance.</param>
            <param name="target">The target instance.</param>
            <param name="comparisonType">The rules ro perform the comparison.</param>
            <returns>An integer than indicates the relationship between the two operands, being -1
            if the source is smaller than the target, +1 if the source is bigger than the target, or
            0 if both can be considered the same.
            </returns>
        </member>
        <member name="T:Kerosene.Tools.MethodEx">
            <summary>
            Helpers and extensions for working with 'Method' instances.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.MethodEx.EasyName(System.Reflection.MethodBase,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the name of this method including the C#-alike name of the type where it has been
            declared.
            </summary>
            <param name="method">The method to obtain its easy name from.</param>
            <param name="chain">True to include the declaring chain of the type where the methos has
            been declared, or false to use only the type's own name.</param>
            <param name="genericNames">True to include the name of the generic type arguments, if any, or
            false to leave them blank.</param>
            <param name="nonGenericNames">True to include the name of the non-generic type arguments, if any,
            or false to leave them blank.</param>
            <returns>The easy name requested.</returns>
        </member>
        <member name="T:Kerosene.Tools.SketchOptions">
            <summary>
            Options for the Object's 'Sketch()' method.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.SketchOptions.Default">
            <summary>
            Use default settings.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.SketchOptions.RoundedBrackets">
            <summary>
            Force the usage of rounded brackets for enumerable objects instead of squared ones.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.SketchOptions.IncludePrivateMembers">
            <summary>
            Include private members in case they are needed to generate the sketch of a given
            object.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.SketchOptions.IncludeStaticMembers">
            <summary>
            Include static members in case they are needed to generate the sketch of a given
            object.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.SketchOptions.IncludeFields">
            <summary>
            Include also fields and not only properties in case they are needed to generate the
            skectch of a given object.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.SketchOptions.WithTypeName">
            <summary>
            To include the type name sorrounding the contents.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.ObjectEx">
            <summary>
            Helpers and extensions for working with 'Object' instances.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ObjectEx.Sketch(System.Object,Kerosene.Tools.SketchOptions)">
            <summary>
            Returns an alternate string representation of the given object.
            </summary>
            <param name="obj">The object to obtains its alternate string representation from.</param>
            <param name="ops">Optional options to obtain the representation.</param>
            <returns>The requested alternate string representation.</returns>
        </member>
        <member name="M:Kerosene.Tools.ObjectEx.TryClone(System.Object)">
            <summary>
            Returns either a clone of the original object, if it implements the 'ICloneable' interface,
            or the original object itself.
            </summary>
            <param name="obj">The object to obtain a clone from.</param>
            <returns>Either a clone of the original object or the original one itself.</returns>
        </member>
        <member name="M:Kerosene.Tools.ObjectEx.TryClone``1(``0)">
            <summary>
            Returns either a clone of the original object, if it implements the 'ICloneable' interface,
            or the original object itself.
            </summary>
            <typeparam name="T">The type to cast to the result of this method.</typeparam>
            <param name="obj">The object to obtain a clone from.</param>
            <returns>Either a clone of the original object or the original one itself.</returns>
        </member>
        <member name="M:Kerosene.Tools.ObjectEx.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the source object into an instance of the given target type.
            </summary>
            <param name="obj">The source object.</param>
            <param name="targetType">The type to convert the source object to.</param>
            <returns>The converted instance, or the original one if no conversion is needed.</returns>
        </member>
        <member name="M:Kerosene.Tools.ObjectEx.ConvertTo``1(System.Object)">
            <summary>
            Converts the source object into an instance of the given target type.
            </summary>
            <typeparam name="T">The type to convert the source object to.</typeparam>
            <param name="obj">The source object.</param>
            <returns>The converted instance, or the original one if no conversion is needed.</returns>
        </member>
        <member name="M:Kerosene.Tools.ObjectEx.LocateConverterDelegate(System.Type,System.Type)">
            <summary>
            Creates the delegate to invoke when conversions are needed.
            </summary>
            <remarks>Following code is an adaptation of an original one proposed by Richard Deming.</remarks>
        </member>
        <member name="T:Kerosene.Tools.StringEx">
            <summary>
            Helpers and extensions for working with 'String' instances.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.StringEx.FormatWith(System.String,System.Object[])">
            <summary>
            Returns a formatted string using the source one as the format specification, along with
            the given optional array of arguments, if any.
            </summary>
            <param name="source">The source instance.</param>
            <param name="args">An optional array of arguments to be used with the format specification.</param>
            <returns>A new formatted string.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.NullIfTrimmedIsEmpty(System.String)">
            <summary>
            Returns null if the source string is null or empty; otherwise returns the trimmed version
            of the original one.
            </summary>
            <param name="source">The source instance.</param>
            <returns>Null or a new string being the trimmed original one.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.EmptyIfTrimmedIsNull(System.String)">
            <summary>
            Returns an empty string if the source one is null or empty; otherwise returns the trimmed
            version of the original one.
            </summary>
            <param name="source">The source instance.</param>
            <returns>The trimmed original string, or an empty one.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.Left(System.String,System.Int32)">
            <summary>
            Returns a new string containing the n left-most characters of the source one.
            </summary>
            <param name="source">The source instance.</param>
            <param name="n">The number of characters to obtain.</param>
            <returns>The requested string.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.Right(System.String,System.Int32)">
            <summary>
            Returns a new string containing the n right-most characters of the source one.
            </summary>
            <param name="source">The source instance.</param>
            <param name="n">The number of characters to obtain.</param>
            <returns>The requested string.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.Remove(System.String,System.String,System.StringComparison)">
            <summary>
            Removes from the source string the first ocurrence of the target one, if any, returning
            a new string with the result.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string to remove, or null.</param>
            <param name="comparisonType">The rules for searching for the target string.</param>
            <returns>A new string with the result.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.Remove(System.String,System.String)">
            <summary>
            Removes from the source string the first ocurrence of the target one, if any, returning
            a new string with the result, using the current culture for comparisons.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string to remove, or null.</param>
            <returns>A new string with the result.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.RemoveLast(System.String,System.String,System.StringComparison)">
            <summary>
            Removes from the source string the last ocurrence of the target one, if any, returning
            a new string with the result.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string to remove, or null.</param>
            <param name="comparisonType">The rules for searching for the target string.</param>
            <returns>A new string with the result.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.RemoveLast(System.String,System.String)">
            <summary>
            Removes from the source string the last ocurrence of the target one, if any, returning
            a new string with the result, using the current culture for comparisons.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The target string to remove, or null.</param>
            <returns>A new string with the result.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.IndexOf(System.String,System.Char,System.StringComparison)">
            <summary>
            Returns the zero-based index of the first ocurrence of the given target character in
            the source string, or -1 if it is not found.
            </summary>
            <param name="source">The source string.</param>
            <param name="target">The character to find.</param>
            <param name="comparisonType">The rules to perform the comparisons.</param>
            <returns>The zero-based index of the first ocurrence of the given target character in
            the source string.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.IndexOfAny(System.String,System.Char[],System.StringComparison)">
            <summary>
            Returns the zero-based index of the first ocurrence of any of the given targets, or -1 if
            no target can be found in the source string.
            </summary>
            <param name="source">The source string.</param>
            <param name="targets">The characters to find.</param>
            <param name="comparisonType">The rules to perform the comparisons.</param>
            <returns>The zero-based index of the first ocurrence of any of the given targets, or -1 if
            no target can be found in the source string.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.IndexOfNotValid(System.String,System.Char[],System.StringComparison)">
            <summary>
            Returns the zero-based index of the first ocurrence in the source string that cannot be
            considered as a valid character.
            </summary>
            <param name="source">The source string.</param>
            <param name="valids">The only valid characters.</param>
            <param name="comparisonType">The rules to perform the comparisons.</param>
            <returns>The zero-based index of the first ocurrence in the source string that cannot be
            considered as a valid character.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.IndexOfNotValid(System.String,System.Char[])">
            <summary>
            Returns the zero-based index of the first ocurrence in the source string that cannot be
            considered as a valid character.
            </summary>
            <param name="source">The source string.</param>
            <param name="valids">The only valid characters.</param>
            <returns>The zero-based index of the first ocurrence in the source string that cannot be
            considered as a valid character.</returns>
        </member>
        <member name="M:Kerosene.Tools.StringEx.Validated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Char,System.Char,System.Int32,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Returns a new validated string using the rules given, or throws an exception if any
            rule is not met.
            </summary>
            <param name="source">The source string.</param>
            <param name="desc">A description of the source string for presentation purposes.</param>
            <param name="canbeNull">True is null strings are considered valid.</param>
            <param name="canbeEmpty">True is empty strings are considered valid.</param>
            <param name="emptyAsNull">True to return null in case of an empty source string.</param>
            <param name="trim">True to trim the source string.</param>
            <param name="trimStart">True to trim the source string from the left.</param>
            <param name="trimEnd">True to trim the source string from the right.</param>
            <param name="padLeft">If not cero the character to use to left-pad the source string.</param>
            <param name="padRight">If not cero the character to use to right-pad the source string.</param>
            <param name="minLen">If possitive the minimum lenght of the resulting string.</param>
            <param name="maxLen">If possitive the maximun lenght of the resulting string.</param>
            <param name="valids">If not null an array containing explicitly the valid characters.</param>
            <param name="invalids">If not null an array containing explicitly the invalid characters.</param>
            <param name="comparisonType">The rules for performing comparisons.</param>
            <returns>The requested validated string.</returns>
        </member>
        <member name="T:Kerosene.Tools.TypeEx">
            <summary>
            Helpers and extensions for working with 'Type' instances.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.TypeEx.PublicAndHidden">
            <summary>
            Binding flags for elements that are public and hidden.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.TypeEx.InstancePublicAndHidden">
            <summary>
            Binding flags for instance elements that are public and hidden.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.TypeEx.InstanceAndStatic">
            <summary>
            Binding flags for instance and static elements.
            </summary>
        </member>
        <member name="F:Kerosene.Tools.TypeEx.FlattenInstancePublicAndHidden">
            <summary>
            Binding flags for public and hidden elements in the instance and in the hierarchy.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.TypeEx.EasyName(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            returns the C#-alike name of the given type.
            </summary>
            <param name="type">The type to obtain its easy name from.</param>
            <param name="chain">True to include the declaring chain, or false to use only the type's
            own name.</param>
            <param name="genericNames">True to include the name of the generic type arguments, if any, or
            false to leave them blank.</param>
            <param name="nonGenericNames">True to include the name of the non-generic type arguments, if any,
            or false to leave them blank.</param>
            <returns>The easy name requested.</returns>
        </member>
        <member name="M:Kerosene.Tools.TypeEx.IsNullableType(System.Type)">
            <summary>
            Returns whether the given type is nullable or not.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True if the type is nullable, false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.TypeEx.IsAnonymousType(System.Type)">
            <summary>
            Gets whether the given type is an anonymous one or not.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the given type is an anonymous one.</returns>
        </member>
        <member name="M:Kerosene.Tools.TypeEx.Implements(System.Type,System.Type)">
            <summary>
            Returns whether the type implements the given base type, including base types with
            an arbitrary number of generic of non-generic arguments.
            </summary>
            <param name="type">The type to test.</param>
            <param name="parent">The base type.</param>
            <returns>True if the type implements the base type, false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.TypeEx.ImplementChain(System.Type,System.Boolean)">
            <summary>
            Helper method to obtain the string representation of the inheritance chain.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.ClockTime">
            <summary>
            Represents a given moment in a day in a 24-hours clock format.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.ValidateHour(System.Int32)">
            <summary>
            Validates that the given hour value is valid.
            <para>Valid values are from 0 to 23.</para>
            </summary>
            <param name="hour">The hour value.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.ValidateMinute(System.Int32)">
            <summary>
            Validates that the given minute value is valid.
            <para>Valid values are from 0 to 59.</para>
            </summary>
            <param name="minute">The minute value.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.ValidateSecond(System.Int32)">
            <summary>
            Validates that the given value for seconds is valid.
            <para>Valid values are from 0 to 59.</para>
            </summary>
            <param name="second">The seconds value.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.ValidateMillisecond(System.Int32)">
            <summary>
            Validates that the given value for milliseconds is valid.
            <para>Valid values are from 0 to 999.</para>
            </summary>
            <param name="millisecond">The milliseconds value.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance using the parameters given.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="millisecond">The millisecond.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.#ctor(System.DateTime)">
            <summary>
            Inializes a new instance with the hour, minute, second and millisecond values obtained
            from the given DateTime instance.
            </summary>
            <param name="dt">The source DateTime instance.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.#ctor(System.TimeSpan)">
            <summary>
            Inializes a new instance with the hour, minute, second and millisecond values obtained
            from the given TimeSpan instance.
            </summary>
            <param name="ts">The source TimeSpan instance.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.ToString">
            <summary>
            Returns the string representation of this instance.
            <para>Second and Milliseconds are only included if needed.</para>
            </summary>
            <returns>A string containing the string representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.Clone">
            <summary>
            Returns a new instance that is a copy of this one.
            </summary>
            <returns>A new instance that is a copy of this one.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.Compare(Kerosene.Tools.ClockTime,Kerosene.Tools.ClockTime)">
            <summary>
            Compares the two instances given and returns -1 if the left instance is the
            smallest one, +1 if the left instance is the bigger one, or 0 if both can be
            considered equivalent.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>An integer expressing the relative order of the left instance with
            respect to the right one.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.CompareTo(Kerosene.Tools.ClockTime)">
            <summary>
            Compares this instance against the other one and returns -1 if this instance
            is the smallest one, +1 if it is the bigger one, or 0 if both can be considered
            equivalent.
            </summary>
            <param name="other">The other instance to compare this one against.</param>
            <returns>An integer expressing the relative order of this instance with respect
            to the other one.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.Equals(System.Object)">
            <summary>
            Determines whether this object is exactly the same one as the given one.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.GetHashCode">
            <summary>
            Serves as the hash function for this type.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_GreaterThan(Kerosene.Tools.ClockTime,Kerosene.Tools.ClockTime)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_LessThan(Kerosene.Tools.ClockTime,Kerosene.Tools.ClockTime)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_GreaterThanOrEqual(Kerosene.Tools.ClockTime,Kerosene.Tools.ClockTime)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_LessThanOrEqual(Kerosene.Tools.ClockTime,Kerosene.Tools.ClockTime)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_Equality(Kerosene.Tools.ClockTime,Kerosene.Tools.ClockTime)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_Inequality(Kerosene.Tools.ClockTime,Kerosene.Tools.ClockTime)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.EquivalentTo(Kerosene.Tools.ClockTime)">
            <summary>
            Returns true if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise.
            </summary>
            <param name="target">The target object to test for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.Parse(System.String,System.Char[])">
            <summary>
            Parsers the given string and creates a new ClockTime instance.
            </summary>
            <param name="str">The source string, with the expressed in the universal "hh:mm:ss.nnn"
            format, or the "hh", "hhmm", "hhmmss" and "hhmmssnnn" ones.</param>
            <param name="separators">If not null the characters to use as field separators.</param>
            <returns>A new ClockTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.TryParse(Kerosene.Tools.ClockTime@,System.String,System.Char[])">
            <summary>
            Tries to parse the given string and creates a new ClockTime instance, returning null in
            case of any errors or an exception describing the error.
            </summary>
            <param name="value">The value where to place the result.</param>
            <param name="str">The source string, with the expressed in the universal "hh:mm:ss.nnn"
            format, or the "hh", "hhmm", "hhmmss" and "hhmmssnnn" ones.</param>
            <param name="separators">If not null the characters to use as field separators.</param>
            <returns>A new ClockTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.ToTimeSpan">
            <summary>
            Creates an equivalent DateTime instance based upon this current one.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_Implicit(Kerosene.Tools.ClockTime)~System.TimeSpan">
            <summary>
            Converts the given ClockTime instance into a TimeSpan equivalent.
            </summary>
            <param name="time">The source ClockTime instance.</param>
            <returns>A new TimeSpan instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.op_Implicit(System.TimeSpan)~Kerosene.Tools.ClockTime">
            <summary>
            Converts the given TimeSpan instance into a ClockTime equivalent.
            </summary>
            <param name="span">The source TimeSpan.</param>
            <returns>A new ClockTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.Add(System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds to this instance the parameters given, they being possitive or negative numbers,
            and returns a new ClockTime instance with the result.
            </summary>
            <param name="ndays">An out parameter to hold the number of days of overflow, if any.</param>
            <param name="hours">The number of hours to add.</param>
            <param name="minutes">The number of minutes to add.</param>
            <param name="seconds">The number of seconds to add.</param>
            <param name="milliseconds">The number of milliseconds to add.</param>
            <returns>A new ClockTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds to this instance the parameters given, they being possitive or negative numbers,
            and returns a new ClockTime instance with the result. Any possible overflow is not
            taken into consideration.
            </summary>
            <param name="hours">The number of hours to add.</param>
            <param name="minutes">The number of minutes to add.</param>
            <param name="seconds">The number of seconds to add.</param>
            <param name="milliseconds">The number of milliseconds to add.</param>
            <returns>A new ClockTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.Now">
            <summary>
            Creates a new instance set to the current time of the local host.
            </summary>
            <returns>A new instance set to the current time of the local host.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTime.UtcNow">
            <summary>
            Creates a new instance set to the current UTC time of the local host, expressed as UTC.
            </summary>
            <returns>A new instance set to the current time of the local host, expressed as UTC.</returns>
        </member>
        <member name="P:Kerosene.Tools.ClockTime.Hour">
            <summary>
            The hour this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ClockTime.Minute">
            <summary>
            The minute this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ClockTime.Second">
            <summary>
            The second this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.ClockTime.Millisecond">
            <summary>
            The millisecond this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.ClockTimeHelper">
            <summary>
            Helpers and extensions for <see cref="T:Kerosene.Tools.ClockTime"/> objects.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.ClockTimeHelper.ToClockTime(System.DateTime)">
            <summary>
            Creates a ClockTime instance equivalent to the source one given.
            </summary>
            <param name="dt">The source instance.</param>
            <returns>A new ClockTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.ClockTimeHelper.ToClockTime(System.TimeSpan)">
            <summary>
            Creates a ClockTime instance equivalent to the source one given.
            </summary>
            <param name="ts">The source instance.</param>
            <returns>A new ClockTime instance.</returns>
        </member>
        <member name="T:Kerosene.Tools.CalendarDate">
            <summary>
            Represents an arbitrary date in a western calendar format.
            <para>This class takes into consideration the Julian and Gregorian variations.</para>
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.ValidateYear(System.Int32)">
            <summary>
            Validates that the given year value is valid.
            <para>Year '0' is not considered valid; negative values are considered as BC ones.</para>
            </summary>
            <param name="year">The year value to validate.</param>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.ValidateMonth(System.Int32)">
            <summary>
             Validates that the given month value is valid.
            <para>Valid month values are from 1 to 12 both included.</para>
            </summary>
            <param name="month">The month value to validate.</param>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.ValidateDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates that the given year, month and day combination represents a valid date or not,
            throwing an exception in this case.
            <para>Dates from 5.10.1582 to 14.10.1582, both included, do not exist neither in the
            Julian or Gregorian calendars because the change from one calendar to the other.</para>
            </summary>
            <param name="year">The year value.</param>
            <param name="month">The month value.</param>
            <param name="day">The day value.</param>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Retursn the number of days in the given month of the given year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns>The number of days of the given year/month combination.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.IsLeapYear(System.Int32)">
            <summary>
            Returns whether the given year is a leap one or not.
            <para>Leap years were introduce in 45 BC but, from this moment to year 12 BC a cadence of
            three years where used instead of the standard 4 years one because and error made by the
            ancient roman astronomers.</para>
            </summary>
            <param name="year">The year to verify.</param>
            <returns>True if the given year is a leap one, false otherwise.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance using the parameters given.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The value.</param>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance extracting the year, month and day values from the given
            DateTime one.
            </summary>
            <param name="dt">The source DateTime instance.</param>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns>A string containing the string representation of this instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Call-back method required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected initializer required for custom serialization.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.Clone">
            <summary>
            Returns a new instance that is a copy of this one.
            </summary>
            <returns>A new instance that is a copy of this one.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.OnClone(System.Object)">
            <summary>
            Invoked when cloning this object to set its state at this point of the inheritance
            chain.
            </summary>
            <param name="cloned">The cloned object.</param>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.Compare(Kerosene.Tools.CalendarDate,Kerosene.Tools.CalendarDate)">
            <summary>
            Compares the two instances given returning -1 if the left instance is the
            smallest one, +1 if the left instance is the bigger one, or 0 if both can be
            considered equivalent.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>An integer expressing the relative order of the left instance with
            respect to the right one.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.CompareTo(Kerosene.Tools.CalendarDate)">
            <summary>
            Compares this instance against the other one and returns -1 if this instance
            is the smallest one, +1 if it is the bigger one, or 0 if both can be considered
            equivalent.
            </summary>
            <param name="other">The other instance to compare this one against.</param>
            <returns>An integer expressing the relative order of this instance with respect
            to the other one.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.Equals(System.Object)">
            <summary>
            Determines whether this object is exactly the same one as the given one.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.GetHashCode">
            <summary>
            Serves as the hash function for this type.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_GreaterThan(Kerosene.Tools.CalendarDate,Kerosene.Tools.CalendarDate)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_LessThan(Kerosene.Tools.CalendarDate,Kerosene.Tools.CalendarDate)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_GreaterThanOrEqual(Kerosene.Tools.CalendarDate,Kerosene.Tools.CalendarDate)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_LessThanOrEqual(Kerosene.Tools.CalendarDate,Kerosene.Tools.CalendarDate)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_Equality(Kerosene.Tools.CalendarDate,Kerosene.Tools.CalendarDate)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_Inequality(Kerosene.Tools.CalendarDate,Kerosene.Tools.CalendarDate)">
            <summary></summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.EquivalentTo(Kerosene.Tools.CalendarDate)">
            <summary>
            Returns true if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise.
            </summary>
            <param name="target">The target object to test for equivalence against.</param>
            <returns>True if the state of this instance can be considered as equivalent to the
            target object given, or false otherwise</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.OnEquivalentTo(System.Object)">
            <summary>
            Invoked to test equivalence at this point of the inheritance chain.
            </summary>
            <param name="target">The target this instance will be tested for equivalence against.</param>
            <returns>True if at this level on the inheritance chain this instance can be considered
            equivalent to the target instance given.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.Parse(System.String,System.Char[])">
            <summary>
            Parsers the given string and creates a new CalendarDate instance.
            </summary>
            <param name="str">The source string, with the expressed in the universal "yyyy-mm-dd"
            format, or the "yyyymmdd" one.</param>
            <param name="separators">If not null the characters to use as field separators.</param>
            <returns>A new CalendarDate instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.TryParse(Kerosene.Tools.CalendarDate@,System.String,System.Char[])">
            <summary>
            Tries to paser the given string and creates a new CalendarDate instance, returning null in
            case of any errors or an exception describing the error.
            </summary>
            <param name="value">The value where to place the result.</param>
            <param name="str">The source string, with the expressed in the universal "yyyy-mm-dd"
            format, or the "yyyymmdd" one.</param>
            <param name="separators">If not null the characters to use as field separators.</param>
            <returns>A new CalendarDate instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.ToDateTime">
            <summary>
            Creates an equivalent DateTime instance based upon this current one.
            </summary>
            <returns>A new DateTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.ToDateTime(Kerosene.Tools.ClockTime)">
            <summary>
            Creates an equivalent DateTime instance based upon this current one and the given
            ClockTime instance.
            </summary>
            <param name="clock">The additional ClockTime instance to be used.</param>
            <returns>A new DateTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_Implicit(Kerosene.Tools.CalendarDate)~System.DateTime">
            <summary>
            Converts the given CalendarDate instance into a DateTime equivalent.
            </summary>
            <param name="calendar">The source CalendarDate instance.</param>
            <returns>A new DateTime instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.op_Implicit(System.DateTime)~Kerosene.Tools.CalendarDate">
            <summary>
            Converts the given DateTime instance into an equivalent CalendarDate one.
            </summary>
            <param name="dt">The source DateTime instance.</param>
            <returns>A new CalendarDate instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.Add(System.Int32)">
            <summary>
            Adds to this date the given number of days, it being a positive or negative number,
            and returns a new instance with the result of the operation.
            </summary>
            <param name="ndays">The positive or negative number of days to add.</param>
            <returns>A new CalendarDate instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.Now">
            <summary>
            Creates a new instance set to the current date of the local host.
            </summary>
            <returns>A new instance set to the current date of the local host.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDate.UtcNow">
            <summary>
            Creates a new instance set to the current UTC date of the local host, expressed as UTC.
            </summary>
            <returns>A new instance set to the current date of the local host, expressed as UTC.</returns>
        </member>
        <member name="P:Kerosene.Tools.CalendarDate.Year">
            <summary>
            The year this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.CalendarDate.Month">
            <summary>
            The month this instance refers to.
            </summary>
        </member>
        <member name="P:Kerosene.Tools.CalendarDate.Day">
            <summary>
            The day this instance refers to.
            </summary>
        </member>
        <member name="T:Kerosene.Tools.CalendarDateHelper">
            <summary>
            Helpers and extensions for working with <see cref="T:Kerosene.Tools.CalendarDate"/> instances.
            </summary>
        </member>
        <member name="M:Kerosene.Tools.CalendarDateHelper.ToCalendarDate(System.DateTime)">
            <summary>
            Creates a CalendarDate instance equivalent to the source one given.
            </summary>
            <param name="dt">The source instance.</param>
            <returns>A new CalendarDate instance.</returns>
        </member>
        <member name="M:Kerosene.Tools.CalendarDateHelper.ToCalendarAndClock(System.DateTime)">
            <summary>
            Splits the given DateTime into its calendar and clock parts.
            </summary>
            <param name="dt">The source DateTime instance.</param>
            <returns>A tuple containing the CalendarDate and ClockTime instances buily from the
            source DateTime one.</returns>
        </member>
    </members>
</doc>
